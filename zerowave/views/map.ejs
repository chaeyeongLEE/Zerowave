<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <script>
      src="https://code.jquery.com/jquery-3.6.1.js"
      integrity="sha256-3zlB5s2uwoUzrXK3BT7AX3FyvojsraNFxCc2vC/7pNI="
      crossorigin="anonymous"
    </script>

    <link rel="stylesheet" href="/static/css/nav.css" />
    <link rel="stylesheet" href="/static/css/map.css" />
    <link rel="stylesheet" href="/static/css/popup.css" />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;500;700&display=swap"
      rel="stylesheet"
    >
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <title>Map</title>
   
</head>

<body>
    <nav id="nav">
        <%-include('./nav.ejs', {type: '', islogin:islogin})%>
    </nav>
    <div id="popupModal" class="transparent">
        <div>
            <span id="placeName"></span>
            <form action="">
                <label for="zeroWasteMap">제로웨이스트</label>
                <input type="radio" name="radio" id="zeroWasteMap" value="zero" checked>
                <label for="ygnMap">용기내챌린지</label>
                <input type="radio" name="radio" value="ygn" id="ygnMap">
            </form>
            <div>
                <button type="button" id="addPlaceBtn" onclick="addPlace()">추가</button>
                <button type="button" onclick="closeModal()">닫기</button>
            </div>
        </div>
    </div>
    <div id="favForm" class="transparent">
        <form action="" name="favForm">
            <input type="text" name="" id="memoInput" placeholder="메모">
            <div>
                <button type="button" id="cancleFavBtn">취소</button>
                <button type="button" id="addFavBtn">등록</button>
                
            </div>
        </form>
    </div>
    <button id="openList" class="transparent" type="button" onclick="toggleList()">검색하기</button>
<div class="map_wrap">
    <div id="map"></div>
    <div id="menu_wrap" class="bg_white">
    <div id="clickLatlng"></div>    
         <div class= "option">
            <div>
                <form onsubmit="searchPlaces(); return false;">
                    <input type="text" value="" id="keyword"> 
                    <button type="submit" id="what">검색</button> 
                    
                </form>
            </div>    

            <div class="dropdown">
                <button class="dropbtn" value="default">Map</button>
                <div class="dropdown-content">
                  <button class="mapBtn" value="zero">제로웨이스트</button><hr>
                  <button class="mapBtn" value="ygn">용기내</button>
                </div>
            </div> 
         </div>
            <hr>
    <ul id="placesList"></ul>
    <div id="pagination"></div>    
    </div>    
</div>



<script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=8d2772601590f0ed140826adec58e8a1&libraries=services"></script>
<script>

    var markers = [];
    let mapContainer = document.getElementById("map");
    let initPosition = new kakao.maps.LatLng( 37.53367689999959, 126.95917989999991);
    let options = { center: initPosition, level: 6 };
    let map = new kakao.maps.Map(mapContainer, options); //지도생성
    let mapName = "default";
    var ps = new kakao.maps.services.Places();  
    let searchIdx = false;
    const modalDiv = $('#popupModal');
    let myFav;
    let neLat,neLng,swLat,swLng;

    

    window.onload = loadmyFav();

    

    function loadmyFav() {
        if(islogin == "true"){
            axios({
            method: "POST",
            url: "/zerowave/map/saveList",
        }).then((res) => {
            myFav= res.data;
            console.log(myFav);
        });
        }

    };
    

    
    $(window).resize(() => {
        chkSize();
    })

    function chkSize(){
    if(window.outerWidth <=1200){
            console.log('2');
        $('#menu_wrap').addClass('transparent');
        $('#openList').removeClass('transparent');
    }

    if(window.outerWidth >1200){
        $('#menu_wrap').removeClass('transparent');
        $('#openList').addClass('transparent');
    }
    }

    chkSize();
    function toggleList(){
        $('#menu_wrap').toggleClass('transparent');
    }
    $('.dropbtn').click(changeMap);
    $('.mapBtn').click(changeMap);


 
    function changeMap(e){
        mapName = e.target.value;
        console.log(mapName);
        searchIdx = false;
        neLat = map.getBounds().getNorthEast().getLat();
        neLng = map.getBounds().getNorthEast().getLng();
        swLat = map.getBounds().getSouthWest().getLat();
        swLng = map.getBounds().getSouthWest().getLng();
        getMapLi(mapName,neLat,neLng,swLat,swLng);
    }
    
    kakao.maps.event.addListener(map, "zoom_changed", function() {
        if(!searchIdx){
            neLat = this.getBounds().getNorthEast().getLat();
             neLng = this.getBounds().getNorthEast().getLng();
             swLat = this.getBounds().getSouthWest().getLat();
             swLng = this.getBounds().getSouthWest().getLng();
            getMapLi(mapName,neLat,neLng,swLat,swLng);
        }
        });    

    kakao.maps.event.addListener(map, "bounds_changed", function() {
        if(!searchIdx){
            neLat = this.getBounds().getNorthEast().getLat();
            neLng = this.getBounds().getNorthEast().getLng();
            swLat = this.getBounds().getSouthWest().getLat();
            swLng = this.getBounds().getSouthWest().getLng();
        getMapLi(mapName,neLat,neLng,swLat,swLng);
        }
    }); 
        

    // 인포윈도우
    // searchPlaces();

    // 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다
    var infowindow = new kakao.maps.InfoWindow({zIndex:1, removable: true});


    function getMapLi(mapName,neLat,neLng,swLat,swLng){
        axios({ 
            method: "post", 
            url: "map/selectMap",
            data: {
                mapName,
                neLat,
                neLng,
                swLat,
                swLng
            }
        }).then(function(res){
            var spotList = res.data; 
            displayPlaces(spotList);

        });
    }


    //검색 결과 목록과 마커 표시, 표출
    function displayPlaces(places) {
        var listEl = document.getElementById('placesList'), 
        menuEl = document.getElementById('menu_wrap'),
        fragment = document.createDocumentFragment(), 
        listStr = '';

        removeAllChildNods(listEl); // 검색 결과 목록에 추가된 항목들을 제거합니다
        removeMarker();       // 지도에 표시되고 있는 마커를 제거합니다

        for ( var i = 0; i < places.length; i++ ) {
        var placePosition = new kakao.maps.LatLng(places[i].lat, places[i].lon);

        let marker = addMarker(placePosition, i, places[i].filter);

        let itemEl = getListItem(i, places[i], "notSearch");  // 검색 결과 항목 Element를 생성합니다
            // 마커와 검색결과 항목에 mouseover 했을때
            // 해당 장소에 인포윈도우에 장소명을 표시합니다
            // mouseout 했을 때는 인포윈도우를 닫습니다
        (function(marker, title, id) { 
            kakao.maps.event.addListener(marker, 'mouseover', function() { displayInfowindow(marker, title,id); });
            //kakao.maps.event.addListener(marker, 'mouseout', function() { infowindow.close(); });
            
            itemEl.addEventListener("click", function (e) {displayInfowindow(marker, title , id);
            //props.setAddress(places[i]);
            map.panTo(placePosition);
              });
            })(marker, places[i].spot_name , places[i].id);

            fragment.appendChild(itemEl);
          }

          listEl?.appendChild(fragment);
          menuEl.scrollTop = 0;

          // map.panTo(bounds);
        }

    //검색결과 목록
    function displaySearchPlaces(places){
        var listEl = document.getElementById('placesList'), 
        menuEl = document.getElementById('menu_wrap'),
        fragment = document.createDocumentFragment(), 
        listStr = '';

        removeAllChildNods(listEl); // 검색 결과 목록에 추가된 항목들을 제거합니다
        removeMarker();       // 지도에 표시되고 있는 마커를 제거합니다

        for ( var i = 0; i < places.length; i++ ) {

        var placePosition = new kakao.maps.LatLng(places[i].y, places[i].x);
        let marker = addMarker_search(placePosition, i);
        console.log(places[i]);
        let itemEl = getListItem(i, places[i], "search");  // 검색 결과 항목 Element를 생성합니다
        (function(marker, title, x,y, address, id) { 
           // kakao.maps.event.addListener(marker, 'click',  function(mouseEvent) {displayInfowindow(marker, title, 0,0);  });
            kakao.maps.event.addListener(marker, 'mouseover', function() { displaySearchInfowindow(marker, title, x,y , address, id); });
           // kakao.maps.event.addListener(marker, 'mouseout', function() { infowindow.close(); });
            console.log(itemEl);
            itemEl.addEventListener("click", function (e) {
            displaySearchInfowindow(marker, title, x,y ,address,id);
            //props.setAddress(places[i]);
            map.panTo(placePosition);
              });
            })(marker, places[i].place_name, places[i].x, places[i].y, places[i].road_address_name, places[i].id);

            fragment.appendChild(itemEl);
          }

          listEl?.appendChild(fragment);
          menuEl.scrollTop = 0;
    }


    // 키워드 검색을 요청하는 함수입니다
    function searchPlaces() {
        var keyword = document.getElementById('keyword').value;
        searchIdx = true;
        if (!keyword.replace(/^\s+|\s+$/g, '')) {
            alert('키워드를 입력해주세요!');
            return false;
        }

        // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다
        ps.keywordSearch( keyword, placesSearchCB); 
    }

    // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다
    function placesSearchCB(data, status, pagination) {
        if (status === kakao.maps.services.Status.OK) {

            // 정상적으로 검색이 완료됐으면
            // 검색 목록과 마커를 표출합니다
            displaySearchPlaces(data);


        } else if (status === kakao.maps.services.Status.ZERO_RESULT) {

            alert('검색 결과가 존재하지 않습니다.');
            return;

        } else if (status === kakao.maps.services.Status.ERROR) {

            alert('검색 결과 중 오류가 발생했습니다.');
            return;

        }
    }
    

    /*------*/

    function getListItem(index,places,type){
            let spot;
            let address;
            if(type == "search"){
                spot = places.place_name;
                address = places.road_address_name;
            }else if(type = "notSearch"){
                spot = places.spot_name;
                address =  places.address;
            }
            var el = document.createElement('li'),
                itemStr = '<span class="markerbg marker_' + (index+1) + '"></span>' +

                    '<div class="info">' +'   <h5>' + spot + '</h5>';

                        if (address) {
                            
                            itemStr += 
                            //'    <span>' + places.address + '</span>' +
                        '<span class="jibun gray">' + address  + '</span>';
                    } 
                        else {
                            itemStr += '    <span>' +  spot  + '</span>'; }
                            //itemStr += '  <span class="tel">' + places.spot_name  + '</span>' + '</div>';

                            el.innerHTML = itemStr;
                            el.className = 'item';

                        return el;
        }
                



function addMarker(position, idx, filter) {
                
                let imageSrc, // 마커이미지의 주소입니다    
                imageSize = new kakao.maps.Size(42, 45), // 마커이미지의 크기입니다
                imageOption = {offset: new kakao.maps.Point(20, 69)};
    
                if(filter == 0){
                    imageSrc = "/static/img/earth_marker.png"
                }else if(filter == 1){
                    imageSrc = "/static/img/ygn_marker.png"
                }
                
               
                var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imageOption),
                markerPosition = new kakao.maps.LatLng(37.54699, 127.09598);
                
                var marker = new kakao.maps.Marker({ position: position, image:markerImage});
                marker.setMap(map);
                markers.push(marker);

                return marker;
    }

    function addMarker_search(position, idx) {
                
                var imageSrc="/static/img/zero_marker.png", // 마커이미지의 주소입니다    
                imageSize = new kakao.maps.Size(40, 45), // 마커이미지의 크기입니다
                imageOption = {offset: new kakao.maps.Point(20, 69)};
               
                var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imageOption),
                markerPosition = new kakao.maps.LatLng(37.54699, 127.09598);
                var marker = new kakao.maps.Marker({ position: position, image:markerImage});
                marker.setMap(map);
                markers.push(marker);

                    return marker;
    }

    function removeMarker() {
                        for ( var i = 0; i < markers.length; i++ ) {
                            markers[i].setMap(null);
                        }
                        markers = [];

            }

        // 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다    
        // 인포윈도우에 장소명을 표시합니다

        //const islogin = "<%=islogin%>";
    function displayInfowindow(marker, title, id) { 
            if(islogin === "true"){ //로그인만 된 경우
                let havFav = false;
                
                for(let i = 0; i<myFav.length; i++){
                    if(myFav[i].id == id){
                        havFav = true;
                        console.log(havFav);
                    }
                }
                if(havFav){ //이미 즐찾함
                    var content = `<div class="bubble"><img src="/static/img/emptystar.png" class="star empty transparent" id="emptystar"><img src="/static/img/fillstar.png" class="star  fill" id="fillstar">${title}</div>`; 
                    }
                else{ //즐찾안함
                    var content = `<div class="bubble"><img src="/static/img/emptystar.png" class="star empty" id="emptystar"><img src="/static/img/fillstar.png" class="star fill transparent"  id="fillstar">${title}</div>`; 
            }
                }
                else{ //로그인안되어있는경우
                    var content = `<div class="bubble">${title}</div>`; 
                }
                
                
                    infowindow.setContent(content); 
                    infowindow.open(map, marker);
                    $('.star').click(e => clickStar(e,id));
        }

        //검색했을때 뜨는 인포윈도우
        function displaySearchInfowindow(marker, title, x, y,address,id){
            let content;
            if(islogin === "true"){ //로그인되어있는 경우
                content = `<div class="bubble">${title}<button class="addplace" onclick="addClickPlus(this)" data-pos-lon="${x}" data-pos-lat="${y}" data-place-name="${title}" data-address = "${address}">+</button></div>`; 
            }else{
                content = `<div class="bubble">${title}</div>`; 
            }
            infowindow.setContent(content); 
            infowindow.open(map, marker);
        }

    


    function clickStar(e,id){
        //즐겨찾기하기
        if(e.target.classList.contains('empty')){
            $('#emptystar').addClass('transparent');
            $('#fillstar').removeClass('transparent');
            $('#favForm').removeClass('transparent');
            $('#addFavBtn').click(()=>{
                let memo = $('#memoInput').val();
                axios({ 
                 method: "post", 
                 url: "map/savePlaces",
                data: {
                id,
                memo
            }
        }).then((res)=>{
            if (res.data == true) { 
                alert("즐겨찾기에 등록되었습니다.");
                window.location.href = "/zerowave/map";
            }
        })

            })
        }else{ //즐겨찾기해제
            $('#emptystar').removeClass('transparent');
            $('#fillstar').addClass('transparent');
            alert("즐겨찾기를 해제하시겠습니까?");

            axios({ 
                 method: "delete", 
                 url: "/zerowave/favlist",
                data: { id }

        }).then((res)=>{
            window.location.href = "/zerowave/map";
        })

        }
    }

    $('#cancleFavBtn').click(()=>{
            $('#favForm').addClass('transparent');
            $('#emptystar').removeClass('transparent');
            $('#fillstar').addClass('transparent');
        })


    let searchLon, searchLat, searchPlaceName, searchAddress;
    function addClickPlus(e){
            searchLon= e.dataset.posLon;
            searchLat= e.dataset.posLat;
            searchPlaceName = e.dataset.placeName;
            searchAddress = e.dataset.address;
        
        modalDiv.removeClass('transparent');
        $('#placeName').text(searchPlaceName);
        }





    function addPlace(){
        let mapName= document.querySelector('input[name="radio"]:checked').value;
        // console.log(searchLon, searchLat, searchPlaceName, searchAddress, mapName);

        axios({ 
                method: "post", 
                url: "map/addPlaces",
                data: {
                    spot_name : searchPlaceName,
                    address : searchAddress,
                    lat : searchLat,
                    lon : searchLon,
                    selectedVal : mapName }
            }).then(function(res){
                if(res.data.check == true) { alert(res.data.msg);} 
                else { alert(res.data.msg);} 
                // var spotList = res.data; 
                // displayPlaces(spotList);
            });
        
            
        }

    function closeModal(){
            modalDiv.addClass('transparent');
        }

    function removeAllChildNods(el) {   
                    while (el.hasChildNodes()) {
                        el.removeChild (el.lastChild);
                    }
            }
            
            
     
    
    
</script>
<footer>
    <p>SeSac</p>
    <p>서울특별시 용산구 청파로</p>
    <a href="https://github.com/chaeyeongLEE/earth">https://github.com/chaeyeongLEE/earth</a>
    <p>Copyright © 2022 zerowave. All rights reserved.</p>
  </footer>
  <script src="/static/js/main.js"></script>
</body>
</html>