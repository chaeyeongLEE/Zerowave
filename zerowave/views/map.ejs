<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <script>
      src="https://code.jquery.com/jquery-3.6.1.js"
      integrity="sha256-3zlB5s2uwoUzrXK3BT7AX3FyvojsraNFxCc2vC/7pNI="
      crossorigin="anonymous"
    </script>

    <link rel="stylesheet" href="/static/css/nav.css" />
    <link rel="stylesheet" href="/static/css/map.css" />
    <link rel="stylesheet" href="/static/css/main.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;500;700&display=swap"
      rel="stylesheet"
    >
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <title>map</title>
   
</head>

<body>
    <nav id="nav">
        <%-include('./nav.ejs', {type: '', islogin:'false' })%>
    </nav>
    
<div class="map_wrap">
    <div id="map"></div>
    
<div class="menu_wrap">
<div class="bg_white"></div>
    <div id= "option">
            <div>
                <form onsubmit="searchPlaces(); return false;">
                    <input type="text" value="" id="keyword" size="25"> 
                    <button type="submit">검색</button> 
                </form>
            </div>    
            <div class="dropdown">
                <button class="dropbtn">Map</button>
                <div class="dropdown-content">
                  <a href="#">제로웨이스트</a>
                  <a href="/zerowave/map/ygn">용기내</a>
                </div>
            </div> 
    <ul id="placesList"></ul>
    <div id="pagination"></div>    
    </div>    
</div>

<script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=8d2772601590f0ed140826adec58e8a1&libraries=services"></script>
<script>

// 마커를 담을 배열입니다
var markers = [];

var mapContainer = document.getElementById('map'), // 지도를 표시할 div 
    mapOption = {
        center: new kakao.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표
        level: 6 // 지도의 확대 레벨
    };  

// 지도를 생성합니다    
var getPosition = function(options) {
        return new Promise(function (resolve, reject){
            navigator.geolocation.getCurrentPosition(resolve, reject, options);
        });
    }

    

    getPosition()
    .then((position)=>{
        var lat = position.coords.latitude;
        var lng = position.coords.longitude;
        var latlng = new kakao.maps.LatLng(lat, lng); // center로 설정하기 위한 좌표
        var map =new kakao.maps.Map(document.getElementById('map'), {
            center : latlng, level:6
        });
        var bounds = map.getBounds();
        var swLatLng = bounds.getSouthWest();
        var neLatLng = bounds.getNorthEast();
        let latlonData = {
            'swLat': swLatLng['Ma'],
            'swLon': swLatLng['La'],
            'neLat': neLatLng['Ma'],
            'neLon': neLatLng['La'],
        };
        axios({
            method: "post", // db에서 제로웨이스트샵 정보 불러오기
            url: "map/zwshop",
            data: { latlonData } // 지도 크기 전달
        })
        .then(function(res){
            var position = res.data; // position 변수에 현재 지도 크기 만큼에 해당하는 가게 배열 담기
            for (i=0; i<position.length; i++){
            var markerPosition  = new kakao.maps.LatLng(position[i].lat, position[i].lon);
            var marker = new kakao.maps.Marker({
                position: markerPosition
            });
            marker.setMap(map);
            // var displayPlaces = res.data;
            // for (i=0; i<position.length; i++){
            // var listEl = document.getElementById('placesList');
            // itemEl = getListItem(i, position[i]); // 검색 결과 항목 Element를 생성합니다
            // menuEl = document.getElementById('menu_wrap'),    
            // listStr = '';
            // }

        };
        })
        axios({
            method: "post", 
            url: "map/zwshop",
            data: { latlonData } 
        })
        .then(function(res){
            var displayPlaces = res.data;
            for (i=0; i<position.length; i++){
            var listEl = document.getElementById('placesList');
            itemEl = getListItem(i, position[i]); // 검색 결과 항목 Element를 생성합니다
            menuEl = document.getElementById('menu_wrap'),    
            listStr = '';
            }
            })
    })
        
    .catch((err) => { console.error(err.message); });
  

// 장소 검색 객체를 생성합니다
var ps = new kakao.maps.services.Places();  

// 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다
var infowindow = new kakao.maps.InfoWindow({zIndex:1});

// 키워드로 장소를 검색합니다
// searchPlaces();

// 키워드 검색을 요청하는 함수입니다
function searchPlaces() {

    var keyword = document.getElementById('keyword').value;

    if (!keyword.replace(/^\s+|\s+$/g, '')) {
        alert('키워드를 입력해주세요!');
        return false;
    }

    // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다
    ps.keywordSearch( keyword, placesSearchCB); }

// 장소검색이 완료됐을 때 호출되는 콜백함수 입니다
function placesSearchCB(data, status, pagination) {
    if (status === kakao.maps.services.Status.OK) {

        // 정상적으로 검색이 완료됐으면 검색 목록과 마커를 표출합니다
        displayPlaces(data);

        // 페이지 번호를 표출합니다
        displayPagination(pagination);

    } else if (status === kakao.maps.services.Status.ZERO_RESULT) {

        alert('검색 결과가 존재하지 않습니다.');
        return;
    } else if (status === kakao.maps.services.Status.ERROR) {

        alert('검색 결과 중 오류가 발생했습니다.');
        return;
    }
}

// 검색 결과 목록과 마커를 표출하는 함수입니다
function displayPlaces(places) {

    var listEl = document.getElementById('placesList'), 
    menuEl = document.getElementById('menu_wrap'),
    fragment = document.createDocumentFragment(), 
    bounds = new kakao.maps.LatLngBounds(), 
    listStr = '';
    
    // 검색 결과 목록에 추가된 항목들을 제거합니다
    removeAllChildNods(listEl);

    // 지도에 표시되고 있는 마커를 제거합니다
    removeMarker();
    
    for ( var i=0; i<places.length; i++ ) {

        // LatLngBounds 객체에 좌표를 추가합니다
        // bounds.extend(placePosition);

        // 마커와 검색결과 항목에 mouseover 했을때
        // 해당 장소에 인포윈도우에 장소명을 표시합니다
        // mouseout 했을 때는 인포윈도우를 닫습니다
        (function(marker, title) {
            kakao.maps.event.addListener(marker, 'mouseover', function() {
                displayInfowindow(marker, title);
            });

            kakao.maps.event.addListener(marker, 'mouseout', function() {
                infowindow.close();
            });

            itemEl.onmouseover =  function () {
                displayInfowindow(marker, title);
            };

            itemEl.onmouseout =  function () {
                infowindow.close();
            };
        })(marker, place
        
[i].place_name);

        fragment.appendChild(itemEl);
    }

    // 검색결과 항목들을 검색결과 목록 Element에 추가합니다
    listEl.appendChild(fragment);
    menuEl.scrollTop = 0;

    // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다
    map.setBounds(bounds);
}

// 검색결과 항목을 Element로 반환하는 함수입니다
function getListItem(index, places) {
    var el = document.createElement('li'),
    itemStr = '<span class="markerbg marker_' + (index+1) + '"></span>' +
                '<div class="info">' +
                '   <h5>' + spot_name + '</h5>';

    if (places.road_address_name) {
        itemStr += ' <span>' + address+ '</span>' +
                    ' <span class="jibun gray">' + spot_name  + '</span>';
    } else {
        itemStr += ' <span>' +  address + '</span>'; 
    };      

    el.innerHTML = itemStr;
    el.className = 'item';

    return el;
}


// 검색결과 목록 하단에 페이지번호를 표시하는 함수입니다
function displayPagination(pagination) {
    var paginationEl = document.getElementById('pagination'),
        fragment = document.createDocumentFragment(),
        i; 

    // 기존에 추가된 페이지번호를 삭제합니다
    while (paginationEl.hasChildNodes()) {
        paginationEl.removeChild (paginationEl.lastChild);
    }

    for (i=1; i<=pagination.last; i++) {
        var el = document.createElement('a');
        el.href = "#";
        el.innerHTML = i;

        if (i===pagination.current) {
            el.className = 'on';
        } else {
            el.onclick = (function(i) {
                return function() {
                    pagination.gotoPage(i);
                }
            })(i);
        }

        fragment.appendChild(el);
    }
    paginationEl.appendChild(fragment);
}

// 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다
// 인포윈도우에 장소명을 표시합니다
function displayInfowindow(marker, title) {
    var content = '<div style="padding:5px;z-index:1;">' + title + '</div>';

    infowindow.setContent(content);
    infowindow.open(map, marker);
}

 // 검색결과 목록의 자식 Element를 제거하는 함수입니다
function removeAllChildNods(el) {   
    while (el.hasChildNodes()) {
        el.removeChild (el.lastChild);
    }
}
</script>
</body>
</html>