<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <script>
      src="https://code.jquery.com/jquery-3.6.1.js"
      integrity="sha256-3zlB5s2uwoUzrXK3BT7AX3FyvojsraNFxCc2vC/7pNI="
      crossorigin="anonymous"
    </script>

    <link rel="stylesheet" href="/static/css/nav.css" />
    <link rel="stylesheet" href="/static/css/map.css" />


    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;500;700&display=swap"
      rel="stylesheet"
    >
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <title>map</title>
   
</head>

<body>
    <nav id="nav">
        <%-include('./nav.ejs', {type: '', islogin:islogin })%>
    </nav>
    
<div class="map_wrap">
    <div id="map"></div>
    <div id="menu_wrap" class="bg_white">
    <div id="clickLatlng"></div>    
         <div class= "option">
            <div>
                <form onsubmit="searchPlaces(); return false;">
                    <input type="text" value="" id="keyword" size="25"> 
                    <button type="submit">검색</button> 
                </form>
            </div>    
            <div class="dropdown">
                <button class="dropbtn">Map</button>
                <div class="dropdown-content">
                  <button class="mapBtn" value="zero">제로웨이스트</button>
                  <button class="mapBtn" value="ygn">용기내</button>
                </div>
            </div> 
            <hr>
    <ul id="placesList"></ul>
    <div id="pagination"></div>    
    </div>    
     <!-- <div id="menu_wrap_bar" class="bg_white">
        <button type="button" class="categoryBtn"><i class="fa-solid fa-bars"></i></button>
        <div class="categoryUl">
        <div id="clickLatlng"></div>    
             <div class= "option_bar">
                <div>
                    <form onsubmit="searchPlaces(); return false;">
                        <input type="text" value="" id="keyword" size="25"> 
                        <button type="submit">검색</button> 
                    </form>
                </div>    
                <div class="dropdown_bar">
                    <button class="dropbtn">Map</button>
                    <div class="dropdown-content">
                      <button class="mapBtn" value="zero">제로웨이스트</button>
                      <button class="mapBtn" value="ygn">용기내</button>
                    </div>
                </div> 
                <hr>
        <ul id="placesList_bar"></ul>
        <div id="pagination_bar"></div>    
        </div>  
    </div>    -->
</div>

<script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=8d2772601590f0ed140826adec58e8a1&libraries=services"></script>
<script>

    var markers = [];
    let mapContainer = document.getElementById("map");
    let initPosition = new kakao.maps.LatLng( 37.53367689999959, 126.95917989999991);
    let options = { center: initPosition, level: 6 };
    let map = new kakao.maps.Map(mapContainer, options); //지도생성
    
    let neLat, neLng,swLat,swLng;

    $('.mapBtn').click(changeMap);

    function changeMap(e){
        let mapName = e.target.value;
        getMapLi(mapName);
    }
    kakao.maps.event.addListener(map, "zoom_changed", function() {
             neLat = this.getBounds().getNorthEast().getLat();
             neLng = this.getBounds().getNorthEast().getLng();
             swLat = this.getBounds().getSouthWest().getLat();
             swLng = this.getBounds().getSouthWest().getLng();
            console.log(neLat, neLng, swLat, swLng);
            getLi();
        });    

    kakao.maps.event.addListener(map, "bounds_changed", function() {
            neLat = this.getBounds().getNorthEast().getLat();
            neLng = this.getBounds().getNorthEast().getLng();
            swLat = this.getBounds().getSouthWest().getLat();
            swLng = this.getBounds().getSouthWest().getLng();
        console.log(neLat, neLng, swLat, swLng);
        getLi();
    }); 
        

    // 인포윈도우
    // searchPlaces();

    // 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다
    var infowindow = new kakao.maps.InfoWindow({zIndex:1});


    function getMapLi(mapName){
        axios({ 
            method: "post", 
            url: "map/selectMap",
            data: {
                mapName : mapName
            }
        }).then(function(res){
            var spotList = res.data; 
            console.log (spotList);

            displayPlaces(spotList);

        });
    }
    function getLi() {
        axios({ 
            method: "post", 
            url: "map/zwshop",
            data: {
                neLat, neLng,swLat,swLng
            }
        }).then(function(res){
            var spotList = res.data; 
            console.log (spotList);

            displayPlaces(spotList);

        });
    }
    getLi();


    //검색 결과 목록과 마커 표시, 표출
    
    function displayPlaces(places) {
        var listEl = document.getElementById('placesList'), 
        menuEl = document.getElementById('menu_wrap'),
        fragment = document.createDocumentFragment(), 
        listStr = '';

        removeAllChildNods(listEl); // 검색 결과 목록에 추가된 항목들을 제거합니다
        removeMarker();       // 지도에 표시되고 있는 마커를 제거합니다

        for ( var i = 0; i < places.length; i++ ) {
        var placePosition = new kakao.maps.LatLng(places[i].lat, places[i].lon);
        let marker = addMarker(placePosition, i);

        let itemEl = getListItem(i, places[i]);  // 검색 결과 항목 Element를 생성합니다

            // 마커와 검색결과 항목에 mouseover 했을때
            // 해당 장소에 인포윈도우에 장소명을 표시합니다
            // mouseout 했을 때는 인포윈도우를 닫습니다
        (function(marker, title) { 
            kakao.maps.event.addListener(marker, 'mouseover', function() { displayInfowindow(marker, title); });
            kakao.maps.event.addListener(marker, 'mouseout', function() { infowindow.close(); });
            
            itemEl.addEventListener("click", function (e) {displayInfowindow(marker, title);
            props.setAddress(places[i]);
            map.panTo(placePosition);
              });
            })(marker, places[i].spot_name);

            fragment.appendChild(itemEl);
          }

          listEl?.appendChild(fragment);
          menuEl.scrollTop = 0;

          // map.panTo(bounds);
        }


           

    function getListItem(index, places) {
        var el = document.createElement('li'),
            itemStr = '<span class="markerbg marker_' + (index+1) + '"></span>' +

                '<div class="info">' +'   <h5>' + places.spot_name + '</h5>';

                    if (places.address) {
                        
                        itemStr += 
                        //'    <span>' + places.address + '</span>' +
                    '<span class="jibun gray">' +  places.address  + '</span>';
                } 
                    else {
                        itemStr += '    <span>' +  places.spot_name  + '</span>'; }
                        //itemStr += '  <span class="tel">' + places.spot_name  + '</span>' + '</div>';

                        el.innerHTML = itemStr;
                        el.className = 'item';

                    return el;
                }   
            

    function addMarker(position, idx, title) {
                
                // Size = new kakao.maps.Size(36, 37), 
                // imgOptions =  { 
                //     spriteSize : new kakao.maps.Size(36, 691), 
                //     spriteOrigin : new kakao.maps.Point(0, (idx*46)+10),
                //     offset: new kakao.maps.Point(13, 37) }, 
                //     markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions), 
                    marker = new kakao.maps.Marker({ position: position});
                    marker.setMap(map);
                    markers.push(marker);

                    return marker;
    }

 

    function removeMarker() {
                    for ( var i = 0; i < markers.length; i++ ) {
                        markers[i].setMap(null);
                    }
                    markers = [];

        }

    // 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다    
    // 인포윈도우에 장소명을 표시합니다

    
    function displayInfowindow(marker, title) { 
                var content = '<div class="bubble">' + title + '</div>'; 

                infowindow.setContent(content); 
                infowindow.open(map, marker);
    }

    function removeAllChildNods(el) {   
                while (el.hasChildNodes()) {
                    el.removeChild (el.lastChild);
                }
        }

            
        
    
</script>
</body>
</html>