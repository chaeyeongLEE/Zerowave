<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <script>
      src="https://code.jquery.com/jquery-3.6.1.js"
      integrity="sha256-3zlB5s2uwoUzrXK3BT7AX3FyvojsraNFxCc2vC/7pNI="
      crossorigin="anonymous"
    </script>

    <link rel="stylesheet" href="/static/css/nav.css" />
    <link rel="stylesheet" href="/static/css/map.css" />
    <link rel="stylesheet" href="/static/css/main.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;500;700&display=swap"
      rel="stylesheet"
    >
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <title>map</title>
   
</head>

<body>
    <nav id="nav">
        <%-include('./nav.ejs', {type: '', islogin:'false' })%>
    </nav>
    
<div class="map_wrap">
    <div id="map"></div>
    <div id="menu_wrap" class="bg_white">

         <div class= "option">
            <div>
                <form onsubmit="searchPlaces(); return false;">
                    <input type="text" value="" id="keyword" size="25"> 
                    <button type="submit">검색</button> 
                    <button onclick="getLi()">현위치에서 재검색</button>
                </form>
            </div>    
            <div class="dropdown">
                <button class="dropbtn">Map</button>
                <div class="dropdown-content">
                  <a href="#">제로웨이스트</a>
                  <a href="/zerowave/map/ygn">용기내</a>
                </div>
            </div> 
            <hr>
    <ul id="placesList"></ul>
    <div id="pagination"></div>    
    </div>    
</div>

<script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=8d2772601590f0ed140826adec58e8a1&libraries=services"></script>
<script>

// 마커를 담을 배열입니다
var markers = [];
    let mapContainer = document.getElementById("map");
    let initPosition = new kakao.maps.LatLng( 37.53367689999959, 126.95917989999991);
        let options = { center: initPosition, level: 6 };
        let map = new kakao.maps.Map(mapContainer, options);
      
        let neLat, neLng,swLat,swLng;
        kakao.maps.event.addListener(map, "zoom_changed", function() {
             neLat = this.getBounds().getNorthEast().getLat();
            neLng = this.getBounds().getNorthEast().getLng();
             swLat = this.getBounds().getSouthWest().getLat();
             swLng = this.getBounds().getSouthWest().getLng();
            console.log(neLat, neLng, swLat, swLng);
            getLi();
        });    


        


        var infowindow = new kakao.maps.InfoWindow({zIndex:1});


        function getLi() {
        axios({ 
            method: "post", 
            url: "map/zwshop",
            data: {
                neLat, neLng,swLat,swLng
            }
        }).then(function(res){
            var spotList = res.data; 
            console.log (spotList);

            function displayPlaces(places) {

                var listEl = document.getElementById('placesList'), 
                menuEl = document.getElementById('menu_wrap'),
                fragment = document.createDocumentFragment(), 
                listStr = '';

                removeAllChildNods(listEl);
                removeMarker();

                
                for ( var i = 0; i < places.length; i++ ) {
                    var placePosition = new kakao.maps.LatLng(places[i].lat, places[i].lon);
                    let marker = addMarker(placePosition, i);

                    let itemEl = getListItem(i, places[i]); 
                    
                    (function(marker, title) { 
                        kakao.maps.event.addListener(marker, 'mouseover', function() { displayInfowindow(marker, title); });
                        kakao.maps.event.addListener(marker, 'mouseout', function() { infowindow.close(); });
                        //itemEl.onmouseover =  function () { displayInfowindow(marker, title); };
                       // itemEl.onmouseout =  function () { infowindow.close(); };
                    })(marker, places[i].spot_name);

                    fragment.appendChild(itemEl);
                }
                listEl.appendChild(fragment);
                menuEl.scrollTop = 0;
            
            }
            displayPlaces(spotList);
            displayPagination(pagination);
        });
    }
    getLi();

        function getListItem(index, places) {
                var el = document.createElement('li'),
                itemStr = '<span class="markerbg marker_' + (index+1) + '"></span>' +
                '<div class="info">' +'   <h5>' + places.spot_name + '</h5>';

                    if (places.address) {
                        itemStr += '    <span>' + places.address + '</span>' +
                    '   <span class="jibun gray">' +  places.address  + '</span>';
                } 
                else {
                    itemStr += '    <span>' +  places.spot_name  + '</span>'; }
                    itemStr += '  <span class="tel">' + places.spot_name  + '</span>' + '</div>';

                el.innerHTML = itemStr;
                el.className = 'item';

                return el;
            }
            

        function addMarker(position, idx, title) {
                
                // imageSize = new kakao.maps.Size(36, 37), 
                // imgOptions =  { 
                //     spriteSize : new kakao.maps.Size(36, 691), 
                //     spriteOrigin : new kakao.maps.Point(0, (idx*46)+10),
                //     offset: new kakao.maps.Point(13, 37) }, 
                //     markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions), 
                    marker = new kakao.maps.Marker({ position: position});
                    marker.setMap(map);
                    markers.push(marker);

                    return marker;
                }
                
        function removeMarker() {
                    for ( var i = 0; i < markers.length; i++ ) {
                        markers[i].setMap(null);
                    }
                    markers = [];
        }

        function displayPagination(pagination) {
                var paginationEl = document.getElementById('pagination'),
                fragment = document.createDocumentFragment(),
                i; 
                
                while (paginationEl.hasChildNodes()) {
                    paginationEl.removeChild (paginationEl.lastChild);
                }
                for (i=1; i<=pagination.last; i++) {
                    var el = document.createElement('a');
                    el.href = "#";
                    el.innerHTML = i;
                    
                    if (i===pagination.current) {
                        el.className = 'on';
                    } else {
                        el.onclick = (function(i) {
                            return function() {
                                pagination.gotoPage(i);
                            }})
                            (i);
                        }
                        fragment.appendChild(el);
                    }
                    paginationEl.appendChild(fragment);
        }
                
        function displayInfowindow(marker, title) { 
                var content = '<div style="padding:5px;z-index:1;">' + title + '</div>'; 
                infowindow.setContent(content); 
                infowindow.open(map, marker);
        }

        function removeAllChildNods(el) {   
                while (el.hasChildNodes()) {
                    el.removeChild (el.lastChild);
                }
        }

            
        
    
</script>
</body>
</html>